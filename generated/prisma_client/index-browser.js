/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip,
} = require("./runtime/index-browser.js");

const Prisma = {};

exports.Prisma = Prisma;
exports.$Enums = {};

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
};

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.Decimal = Decimal;

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.validator = Public.validator;

/**
 * Extensions
 */
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull;
Prisma.JsonNull = objectEnumValues.instances.JsonNull;
Prisma.AnyNull = objectEnumValues.instances.AnyNull;

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull,
};

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: "ReadUncommitted",
  ReadCommitted: "ReadCommitted",
  RepeatableRead: "RepeatableRead",
  Serializable: "Serializable",
});

exports.Prisma.UserScalarFieldEnum = {
  id: "id",
  email: "email",
  username: "username",
  password: "password",
  displayName: "displayName",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  lastLogin: "lastLogin",
};

exports.Prisma.RoleScalarFieldEnum = {
  id: "id",
  name: "name",
};

exports.Prisma.UserRoleScalarFieldEnum = {
  id: "id",
  userId: "userId",
  roleId: "roleId",
};

exports.Prisma.ProductScalarFieldEnum = {
  id: "id",
  title: "title",
  slug: "slug",
  shortDescription: "shortDescription",
  description: "description",
  status: "status",
  metadata: "metadata",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.ProductVariantScalarFieldEnum = {
  id: "id",
  productId: "productId",
  name: "name",
  skuPrefix: "skuPrefix",
  price: "price",
  compareAtPrice: "compareAtPrice",
  attributes: "attributes",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: "id",
  sku: "sku",
  variantId: "variantId",
  quantity: "quantity",
  reserved: "reserved",
  location: "location",
  metadata: "metadata",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.OrderScalarFieldEnum = {
  id: "id",
  orderNumber: "orderNumber",
  userId: "userId",
  status: "status",
  subtotal: "subtotal",
  shipping: "shipping",
  tax: "tax",
  total: "total",
  paymentMethod: "paymentMethod",
  shippingAddressId: "shippingAddressId",
  billingAddressId: "billingAddressId",
  couponId: "couponId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: "id",
  orderId: "orderId",
  productId: "productId",
  variantId: "variantId",
  sku: "sku",
  name: "name",
  price: "price",
  quantity: "quantity",
  total: "total",
  returned: "returned",
  createdAt: "createdAt",
};

exports.Prisma.CouponScalarFieldEnum = {
  id: "id",
  code: "code",
  type: "type",
  amount: "amount",
  percent: "percent",
  description: "description",
  startsAt: "startsAt",
  expiresAt: "expiresAt",
  usageLimit: "usageLimit",
  usagePerUser: "usagePerUser",
  timesUsed: "timesUsed",
  active: "active",
  metadata: "metadata",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: "id",
  userId: "userId",
  productId: "productId",
  rating: "rating",
  title: "title",
  body: "body",
  approved: "approved",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.WishlistScalarFieldEnum = {
  id: "id",
  userId: "userId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.WishlistItemScalarFieldEnum = {
  id: "id",
  wishlistId: "wishlistId",
  productId: "productId",
  variantId: "variantId",
  createdAt: "createdAt",
};

exports.Prisma.AddressScalarFieldEnum = {
  id: "id",
  userId: "userId",
  fullName: "fullName",
  line1: "line1",
  line2: "line2",
  city: "city",
  province: "province",
  postalCode: "postalCode",
  country: "country",
  phone: "phone",
  metadata: "metadata",
  isDefaultShipping: "isDefaultShipping",
  isDefaultBilling: "isDefaultBilling",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: "id",
  actorId: "actorId",
  action: "action",
  entity: "entity",
  entityId: "entityId",
  changes: "changes",
  ip: "ip",
  userAgent: "userAgent",
  createdAt: "createdAt",
};

exports.Prisma.ReturnRequestScalarFieldEnum = {
  id: "id",
  orderId: "orderId",
  orderItemId: "orderItemId",
  reason: "reason",
  status: "status",
  evidence: "evidence",
  requestedAt: "requestedAt",
  processedAt: "processedAt",
  metadata: "metadata",
};

exports.Prisma.RefundScalarFieldEnum = {
  id: "id",
  orderId: "orderId",
  returnRequestId: "returnRequestId",
  amount: "amount",
  method: "method",
  status: "status",
  providerRef: "providerRef",
  metadata: "metadata",
  createdAt: "createdAt",
  processedAt: "processedAt",
};

exports.Prisma.PaymentMetaScalarFieldEnum = {
  id: "id",
  orderId: "orderId",
  provider: "provider",
  transactionId: "transactionId",
  status: "status",
  amount: "amount",
  raw: "raw",
  capturedAt: "capturedAt",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.SortOrder = {
  asc: "asc",
  desc: "desc",
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
};

exports.Prisma.QueryMode = {
  default: "default",
  insensitive: "insensitive",
};

exports.Prisma.NullsOrder = {
  first: "first",
  last: "last",
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull,
};
exports.ProductStatus = exports.$Enums.ProductStatus = {
  DRAFT: "DRAFT",
  PUBLISHED: "PUBLISHED",
  ARCHIVED: "ARCHIVED",
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  CREATED: "CREATED",
  PENDING_PAYMENT: "PENDING_PAYMENT",
  PAID: "PAID",
  FAILED_PAYMENT: "FAILED_PAYMENT",
  COD_PENDING: "COD_PENDING",
  COD_COMPLETED: "COD_COMPLETED",
  FULFILLED: "FULFILLED",
  CANCELLED: "CANCELLED",
  REFUNDED: "REFUNDED",
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  VNPAY: "VNPAY",
  COD: "COD",
  WALLET: "WALLET",
  OTHER: "OTHER",
};

exports.CouponType = exports.$Enums.CouponType = {
  PERCENT: "PERCENT",
  FIXED: "FIXED",
  BOGO: "BOGO",
};

exports.ReturnStatus = exports.$Enums.ReturnStatus = {
  PENDING: "PENDING",
  APPROVED: "APPROVED",
  REJECTED: "REJECTED",
  RECEIVED: "RECEIVED",
};

exports.RefundStatus = exports.$Enums.RefundStatus = {
  PENDING: "PENDING",
  COMPLETED: "COMPLETED",
  FAILED: "FAILED",
};

exports.Prisma.ModelName = {
  User: "User",
  Role: "Role",
  UserRole: "UserRole",
  Product: "Product",
  ProductVariant: "ProductVariant",
  Inventory: "Inventory",
  Order: "Order",
  OrderItem: "OrderItem",
  Coupon: "Coupon",
  Review: "Review",
  Wishlist: "Wishlist",
  WishlistItem: "WishlistItem",
  Address: "Address",
  AuditLog: "AuditLog",
  ReturnRequest: "ReturnRequest",
  Refund: "Refund",
  PaymentMeta: "PaymentMeta",
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message;
        const runtime = getRuntime();
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message =
            "PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `" +
            runtime.prettyName +
            "`).";
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`;

        throw new Error(message);
      },
    });
  }
}

exports.PrismaClient = PrismaClient;

Object.assign(exports, Prisma);
