/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require("./runtime/wasm-engine-edge.js");

const Prisma = {};

exports.Prisma = Prisma;
exports.$Enums = {};

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
};

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError;
Prisma.PrismaClientInitializationError = PrismaClientInitializationError;
Prisma.PrismaClientValidationError = PrismaClientValidationError;
Prisma.Decimal = Decimal;

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag;
Prisma.empty = empty;
Prisma.join = join;
Prisma.raw = raw;
Prisma.validator = Public.validator;

/**
 * Extensions
 */
Prisma.getExtensionContext = Extensions.getExtensionContext;
Prisma.defineExtension = Extensions.defineExtension;

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull;
Prisma.JsonNull = objectEnumValues.instances.JsonNull;
Prisma.AnyNull = objectEnumValues.instances.AnyNull;

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull,
};

/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: "ReadUncommitted",
  ReadCommitted: "ReadCommitted",
  RepeatableRead: "RepeatableRead",
  Serializable: "Serializable",
});

exports.Prisma.UserScalarFieldEnum = {
  id: "id",
  email: "email",
  username: "username",
  password: "password",
  displayName: "displayName",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  lastLogin: "lastLogin",
};

exports.Prisma.RoleScalarFieldEnum = {
  id: "id",
  name: "name",
};

exports.Prisma.UserRoleScalarFieldEnum = {
  id: "id",
  userId: "userId",
  roleId: "roleId",
};

exports.Prisma.ProductScalarFieldEnum = {
  id: "id",
  title: "title",
  slug: "slug",
  shortDescription: "shortDescription",
  description: "description",
  status: "status",
  metadata: "metadata",
  categoryId: "categoryId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: "id",
  name: "name",
  slug: "slug",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.ProductImageScalarFieldEnum = {
  id: "id",
  url: "url",
  alt: "alt",
  isPrimary: "isPrimary",
  productId: "productId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.ProductVariantScalarFieldEnum = {
  id: "id",
  productId: "productId",
  name: "name",
  skuPrefix: "skuPrefix",
  price: "price",
  compareAtPrice: "compareAtPrice",
  attributes: "attributes",
  image: "image",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: "id",
  sku: "sku",
  variantId: "variantId",
  quantity: "quantity",
  reserved: "reserved",
  location: "location",
  metadata: "metadata",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.OrderScalarFieldEnum = {
  id: "id",
  orderNumber: "orderNumber",
  userId: "userId",
  status: "status",
  subtotal: "subtotal",
  shipping: "shipping",
  tax: "tax",
  total: "total",
  paymentMethod: "paymentMethod",
  shippingAddressId: "shippingAddressId",
  billingAddressId: "billingAddressId",
  couponId: "couponId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: "id",
  orderId: "orderId",
  productId: "productId",
  variantId: "variantId",
  sku: "sku",
  name: "name",
  price: "price",
  quantity: "quantity",
  total: "total",
  returned: "returned",
  createdAt: "createdAt",
};

exports.Prisma.CouponScalarFieldEnum = {
  id: "id",
  code: "code",
  type: "type",
  amount: "amount",
  percent: "percent",
  description: "description",
  startsAt: "startsAt",
  expiresAt: "expiresAt",
  usageLimit: "usageLimit",
  usagePerUser: "usagePerUser",
  timesUsed: "timesUsed",
  active: "active",
  metadata: "metadata",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: "id",
  userId: "userId",
  productId: "productId",
  rating: "rating",
  title: "title",
  body: "body",
  approved: "approved",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.WishlistScalarFieldEnum = {
  id: "id",
  userId: "userId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.WishlistItemScalarFieldEnum = {
  id: "id",
  wishlistId: "wishlistId",
  productId: "productId",
  variantId: "variantId",
  createdAt: "createdAt",
};

exports.Prisma.AddressScalarFieldEnum = {
  id: "id",
  userId: "userId",
  fullName: "fullName",
  line1: "line1",
  line2: "line2",
  city: "city",
  province: "province",
  postalCode: "postalCode",
  country: "country",
  phone: "phone",
  metadata: "metadata",
  isDefaultShipping: "isDefaultShipping",
  isDefaultBilling: "isDefaultBilling",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: "id",
  actorId: "actorId",
  action: "action",
  entity: "entity",
  entityId: "entityId",
  changes: "changes",
  ip: "ip",
  userAgent: "userAgent",
  createdAt: "createdAt",
};

exports.Prisma.ReturnRequestScalarFieldEnum = {
  id: "id",
  orderId: "orderId",
  orderItemId: "orderItemId",
  reason: "reason",
  status: "status",
  evidence: "evidence",
  requestedAt: "requestedAt",
  processedAt: "processedAt",
  metadata: "metadata",
};

exports.Prisma.RefundScalarFieldEnum = {
  id: "id",
  orderId: "orderId",
  returnRequestId: "returnRequestId",
  amount: "amount",
  method: "method",
  status: "status",
  providerRef: "providerRef",
  metadata: "metadata",
  createdAt: "createdAt",
  processedAt: "processedAt",
};

exports.Prisma.PaymentMetaScalarFieldEnum = {
  id: "id",
  orderId: "orderId",
  provider: "provider",
  transactionId: "transactionId",
  status: "status",
  amount: "amount",
  raw: "raw",
  capturedAt: "capturedAt",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.SortOrder = {
  asc: "asc",
  desc: "desc",
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
};

exports.Prisma.QueryMode = {
  default: "default",
  insensitive: "insensitive",
};

exports.Prisma.NullsOrder = {
  first: "first",
  last: "last",
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull,
};
exports.ProductStatus = exports.$Enums.ProductStatus = {
  DRAFT: "DRAFT",
  PUBLISHED: "PUBLISHED",
  ARCHIVED: "ARCHIVED",
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  CREATED: "CREATED",
  PENDING_PAYMENT: "PENDING_PAYMENT",
  PAID: "PAID",
  FAILED_PAYMENT: "FAILED_PAYMENT",
  COD_PENDING: "COD_PENDING",
  COD_COMPLETED: "COD_COMPLETED",
  FULFILLED: "FULFILLED",
  CANCELLED: "CANCELLED",
  REFUNDED: "REFUNDED",
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  VNPAY: "VNPAY",
  COD: "COD",
  WALLET: "WALLET",
  OTHER: "OTHER",
};

exports.CouponType = exports.$Enums.CouponType = {
  PERCENT: "PERCENT",
  FIXED: "FIXED",
  BOGO: "BOGO",
};

exports.RefundStatus = exports.$Enums.RefundStatus = {
  PENDING: "PENDING",
  COMPLETED: "COMPLETED",
  FAILED: "FAILED",
};

exports.ReturnStatus = exports.$Enums.ReturnStatus = {
  PENDING: "PENDING",
  APPROVED: "APPROVED",
  REJECTED: "REJECTED",
  RECEIVED: "RECEIVED",
};

exports.Prisma.ModelName = {
  User: "User",
  Role: "Role",
  UserRole: "UserRole",
  Product: "Product",
  Category: "Category",
  ProductImage: "ProductImage",
  ProductVariant: "ProductVariant",
  Inventory: "Inventory",
  Order: "Order",
  OrderItem: "OrderItem",
  Coupon: "Coupon",
  Review: "Review",
  Wishlist: "Wishlist",
  WishlistItem: "WishlistItem",
  Address: "Address",
  AuditLog: "AuditLog",
  ReturnRequest: "ReturnRequest",
  Refund: "Refund",
  PaymentMeta: "PaymentMeta",
};
/**
 * Create the Client
 */
const config = {
  generator: {
    name: "client",
    provider: {
      fromEnvVar: null,
      value: "prisma-client-js",
    },
    output: {
      value: "C:\\SofaStore\\sofa-ecommerce\\sofa-ecommerce\\generated\\prisma_client",
      fromEnvVar: null,
    },
    config: {
      engineType: "library",
    },
    binaryTargets: [
      {
        fromEnvVar: null,
        value: "windows",
        native: true,
      },
    ],
    previewFeatures: [],
    sourceFilePath: "C:\\SofaStore\\sofa-ecommerce\\sofa-ecommerce\\prisma\\schema.prisma",
    isCustomOutput: true,
  },
  relativeEnvPaths: {
    rootEnvPath: null,
    schemaEnvPath: "../../.env",
  },
  relativePath: "../../prisma",
  clientVersion: "6.16.3",
  engineVersion: "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  datasourceNames: ["db"],
  activeProvider: "postgresql",
  inlineDatasources: {
    db: {
      url: {
        fromEnvVar: "DATABASE_URL",
        value: null,
      },
    },
  },
  inlineSchema:
    '// =========================================================\n// Prisma Schema for Sofa E-commerce\n// =========================================================\n\ngenerator client {\n  provider = "prisma-client-js"\n  output   = "../generated/prisma_client"\n}\n\ndatasource db {\n  provider = "postgresql"\n  url      = env("DATABASE_URL")\n}\n\n// =========================================================\n// ENUMS\n// =========================================================\n\nenum ProductStatus {\n  DRAFT\n  PUBLISHED\n  ARCHIVED\n}\n\nenum OrderStatus {\n  CREATED\n  PENDING_PAYMENT\n  PAID\n  FAILED_PAYMENT\n  COD_PENDING\n  COD_COMPLETED\n  FULFILLED\n  CANCELLED\n  REFUNDED\n}\n\nenum PaymentMethod {\n  VNPAY\n  COD\n  WALLET\n  OTHER\n}\n\nenum CouponType {\n  PERCENT\n  FIXED\n  BOGO\n}\n\nenum RefundStatus {\n  PENDING\n  COMPLETED\n  FAILED\n}\n\nenum ReturnStatus {\n  PENDING\n  APPROVED\n  REJECTED\n  RECEIVED\n}\n\n// =========================================================\n// USER, ROLE, AUTH\n// =========================================================\n\nmodel User {\n  id          Int        @id @default(autoincrement())\n  email       String     @unique\n  username    String?    @unique\n  password    String? // hashed password (if using email/password)\n  displayName String?\n  userRoles   UserRole[]\n  addresses   Address[]\n  wishlist    Wishlist?\n  reviews     Review[]\n  orders      Order[]\n  createdAt   DateTime   @default(now())\n  updatedAt   DateTime   @updatedAt\n  lastLogin   DateTime?\n  AuditLog    AuditLog[]\n\n  @@index([email], map: "idx_user_email")\n}\n\nmodel Role {\n  id        Int        @id @default(autoincrement())\n  name      String     @unique // e.g. ADMIN, PRODUCT_MANAGER, ORDER_MANAGER, CUSTOMER\n  userRoles UserRole[]\n}\n\nmodel UserRole {\n  id     Int  @id @default(autoincrement())\n  user   User @relation(fields: [userId], references: [id])\n  userId Int\n  role   Role @relation(fields: [roleId], references: [id])\n  roleId Int\n\n  @@unique([userId, roleId], map: "uq_user_role")\n  @@index([roleId], map: "idx_userrole_role")\n}\n\n// =========================================================\n// PRODUCTS & INVENTORY\n// =========================================================\n\nmodel Product {\n  id               Int              @id @default(autoincrement())\n  title            String\n  slug             String           @unique\n  shortDescription String?\n  description      String?\n  status           ProductStatus    @default(PUBLISHED)\n  metadata         Json?\n  images           ProductImage[]\n  variants         ProductVariant[]\n  reviews          Review[]\n  category         Category?        @relation(fields: [categoryId], references: [id])\n  categoryId       Int?\n  createdAt        DateTime         @default(now())\n  updatedAt        DateTime         @updatedAt\n  OrderItem        OrderItem[]\n  WishlistItem     WishlistItem[]\n\n  @@index([title], map: "idx_product_title")\n  @@index([slug], map: "idx_product_slug")\n  @@index([status], map: "idx_product_status")\n  @@index([createdAt], map: "idx_product_createdAt")\n  @@index([title, shortDescription], map: "idx_product_title_shortdesc")\n  @@index([categoryId], map: "idx_product_category")\n}\n\nmodel Category {\n  id        Int       @id @default(autoincrement())\n  name      String    @unique\n  slug      String    @unique\n  products  Product[]\n  createdAt DateTime  @default(now())\n  updatedAt DateTime  @updatedAt\n\n  @@index([name], map: "idx_category_name")\n}\n\nmodel ProductImage {\n  id        Int      @id @default(autoincrement())\n  url       String\n  alt       String?\n  isPrimary Boolean  @default(false)\n  product   Product  @relation(fields: [productId], references: [id])\n  productId Int\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([productId], map: "idx_productimage_product")\n}\n\nmodel ProductVariant {\n  id             Int         @id @default(autoincrement())\n  product        Product     @relation(fields: [productId], references: [id])\n  productId      Int\n  name           String // e.g. "Large / Leather / Gray"\n  skuPrefix      String?\n  price          Decimal     @db.Decimal(12, 2)\n  compareAtPrice Decimal?    @db.Decimal(12, 2)\n  attributes     Json?\n  image          String?\n  inventory      Inventory[]\n  createdAt      DateTime    @default(now())\n  updatedAt      DateTime    @updatedAt\n  OrderItem      OrderItem[]\n\n  @@index([productId], map: "idx_variant_product")\n  @@index([name], map: "idx_variant_name")\n}\n\nmodel Inventory {\n  id        Int            @id @default(autoincrement())\n  sku       String         @unique\n  variant   ProductVariant @relation(fields: [variantId], references: [id])\n  variantId Int\n  quantity  Int            @default(0)\n  reserved  Int            @default(0)\n  location  String?\n  metadata  Json?\n  createdAt DateTime       @default(now())\n  updatedAt DateTime       @updatedAt\n\n  @@index([sku], map: "idx_inventory_sku")\n  @@index([variantId], map: "idx_inventory_variant")\n}\n\n// =========================================================\n// ORDERS & PAYMENTS\n// =========================================================\n\nmodel Order {\n  id                Int             @id @default(autoincrement())\n  orderNumber       String          @unique\n  user              User?           @relation(fields: [userId], references: [id])\n  userId            Int?\n  status            OrderStatus     @default(CREATED)\n  subtotal          Decimal         @db.Decimal(12, 2)\n  shipping          Decimal         @default(0) @db.Decimal(12, 2)\n  tax               Decimal         @default(0) @db.Decimal(12, 2)\n  total             Decimal         @db.Decimal(12, 2)\n  paymentMethod     PaymentMethod\n  paymentMeta       PaymentMeta?\n  items             OrderItem[]\n  shippingAddress   Address?        @relation("ShippingAddress", fields: [shippingAddressId], references: [id])\n  shippingAddressId Int?\n  billingAddress    Address?        @relation("BillingAddress", fields: [billingAddressId], references: [id])\n  billingAddressId  Int?\n  coupon            Coupon?         @relation(fields: [couponId], references: [id])\n  couponId          Int?\n  createdAt         DateTime        @default(now())\n  updatedAt         DateTime        @updatedAt\n  ReturnRequest     ReturnRequest[]\n  Refund            Refund[]\n\n  @@index([orderNumber], map: "idx_order_number")\n  @@index([userId], map: "idx_order_user")\n  @@index([status], map: "idx_order_status")\n  @@index([createdAt], map: "idx_order_createdAt")\n}\n\nmodel OrderItem {\n  id            Int             @id @default(autoincrement())\n  order         Order           @relation(fields: [orderId], references: [id])\n  orderId       Int\n  product       Product?        @relation(fields: [productId], references: [id])\n  productId     Int?\n  variant       ProductVariant? @relation(fields: [variantId], references: [id])\n  variantId     Int?\n  sku           String?\n  name          String\n  price         Decimal         @db.Decimal(12, 2)\n  quantity      Int\n  total         Decimal         @db.Decimal(12, 2)\n  returned      Boolean         @default(false)\n  createdAt     DateTime        @default(now())\n  ReturnRequest ReturnRequest[]\n\n  @@index([orderId], map: "idx_orderitem_order")\n  @@index([productId], map: "idx_orderitem_product")\n}\n\n// =========================================================\n// COUPONS & PROMOTIONS\n// =========================================================\n\nmodel Coupon {\n  id           Int        @id @default(autoincrement())\n  code         String     @unique\n  type         CouponType\n  amount       Decimal?   @db.Decimal(12, 2)\n  percent      Int?\n  description  String?\n  startsAt     DateTime?\n  expiresAt    DateTime?\n  usageLimit   Int?\n  usagePerUser Int?\n  timesUsed    Int        @default(0)\n  active       Boolean    @default(true)\n  metadata     Json?\n  createdAt    DateTime   @default(now())\n  updatedAt    DateTime   @updatedAt\n  Order        Order[]\n\n  @@index([code], map: "idx_coupon_code")\n}\n\n// =========================================================\n// REVIEWS\n// =========================================================\n\nmodel Review {\n  id        Int      @id @default(autoincrement())\n  user      User?    @relation(fields: [userId], references: [id])\n  userId    Int?\n  product   Product  @relation(fields: [productId], references: [id])\n  productId Int\n  rating    Int\n  title     String?\n  body      String?\n  approved  Boolean  @default(false)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@unique([userId, productId], map: "uq_review_user_product")\n  @@index([productId], map: "idx_review_product")\n  @@index([userId], map: "idx_review_user")\n}\n\n// =========================================================\n// WISHLIST\n// =========================================================\n\nmodel Wishlist {\n  id        Int            @id @default(autoincrement())\n  user      User           @relation(fields: [userId], references: [id])\n  userId    Int            @unique\n  items     WishlistItem[]\n  createdAt DateTime       @default(now())\n  updatedAt DateTime       @updatedAt\n}\n\nmodel WishlistItem {\n  id         Int      @id @default(autoincrement())\n  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])\n  wishlistId Int\n  product    Product  @relation(fields: [productId], references: [id])\n  productId  Int\n  variantId  Int?\n  createdAt  DateTime @default(now())\n\n  @@unique([wishlistId, productId, variantId], map: "uq_wishlist_item")\n  @@index([productId], map: "idx_wishlist_product")\n}\n\n// =========================================================\n// ADDRESSES\n// =========================================================\n\nmodel Address {\n  id                Int      @id @default(autoincrement())\n  user              User?    @relation(fields: [userId], references: [id])\n  userId            Int?\n  fullName          String\n  line1             String\n  line2             String?\n  city              String\n  province          String?\n  postalCode        String?\n  country           String\n  phone             String?\n  metadata          Json?\n  isDefaultShipping Boolean  @default(false)\n  isDefaultBilling  Boolean  @default(false)\n  createdAt         DateTime @default(now())\n  updatedAt         DateTime @updatedAt\n\n  ordersShipping Order[] @relation("ShippingAddress")\n  ordersBilling  Order[] @relation("BillingAddress")\n\n  @@index([userId], map: "idx_address_user")\n}\n\n// =========================================================\n// AUDIT LOGS\n// =========================================================\n\nmodel AuditLog {\n  id        Int      @id @default(autoincrement())\n  actor     User?    @relation(fields: [actorId], references: [id])\n  actorId   Int?\n  action    String\n  entity    String\n  entityId  String?\n  changes   Json?\n  ip        String?\n  userAgent String?\n  createdAt DateTime @default(now())\n\n  @@index([actorId], map: "idx_audit_actor")\n  @@index([entity, entityId], map: "idx_audit_entity")\n}\n\n// =========================================================\n// RETURNS & REFUNDS\n// =========================================================\n\nmodel ReturnRequest {\n  id          Int          @id @default(autoincrement())\n  order       Order        @relation(fields: [orderId], references: [id])\n  orderId     Int\n  orderItem   OrderItem    @relation(fields: [orderItemId], references: [id])\n  orderItemId Int\n  reason      String\n  status      ReturnStatus @default(PENDING)\n  evidence    Json?\n  requestedAt DateTime     @default(now())\n  processedAt DateTime?\n  refund      Refund?\n  metadata    Json?\n\n  @@index([status], map: "idx_return_status")\n  @@index([orderId], map: "idx_return_order")\n}\n\nmodel Refund {\n  id              Int            @id @default(autoincrement())\n  order           Order          @relation(fields: [orderId], references: [id])\n  orderId         Int\n  returnRequest   ReturnRequest? @relation(fields: [returnRequestId], references: [id])\n  returnRequestId Int?           @unique\n  amount          Decimal        @db.Decimal(12, 2)\n  method          String\n  status          RefundStatus   @default(PENDING)\n  providerRef     String?\n  metadata        Json?\n  createdAt       DateTime       @default(now())\n  processedAt     DateTime?\n\n  @@index([orderId], map: "idx_refund_order")\n}\n\n// =========================================================\n// PAYMENT META\n// =========================================================\n\nmodel PaymentMeta {\n  id            Int       @id @default(autoincrement())\n  order         Order     @relation(fields: [orderId], references: [id])\n  orderId       Int       @unique\n  provider      String\n  transactionId String?\n  status        String\n  amount        Decimal   @db.Decimal(12, 2)\n  raw           Json?\n  capturedAt    DateTime?\n  createdAt     DateTime  @default(now())\n  updatedAt     DateTime  @updatedAt\n\n  @@index([transactionId], map: "idx_payment_transaction")\n}\n',
  inlineSchemaHash: "32cf53541e837cc417e6b5d1adbf69ae4fd1ad425b4c0c1e23764ba1bcef4a49",
  copyEngine: true,
};
config.dirname = "/";

config.runtimeDataModel = JSON.parse(
  '{"models":{"User":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"email","kind":"scalar","type":"String"},{"name":"username","kind":"scalar","type":"String"},{"name":"password","kind":"scalar","type":"String"},{"name":"displayName","kind":"scalar","type":"String"},{"name":"userRoles","kind":"object","type":"UserRole","relationName":"UserToUserRole"},{"name":"addresses","kind":"object","type":"Address","relationName":"AddressToUser"},{"name":"wishlist","kind":"object","type":"Wishlist","relationName":"UserToWishlist"},{"name":"reviews","kind":"object","type":"Review","relationName":"ReviewToUser"},{"name":"orders","kind":"object","type":"Order","relationName":"OrderToUser"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"lastLogin","kind":"scalar","type":"DateTime"},{"name":"AuditLog","kind":"object","type":"AuditLog","relationName":"AuditLogToUser"}],"dbName":null},"Role":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"name","kind":"scalar","type":"String"},{"name":"userRoles","kind":"object","type":"UserRole","relationName":"RoleToUserRole"}],"dbName":null},"UserRole":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"user","kind":"object","type":"User","relationName":"UserToUserRole"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"role","kind":"object","type":"Role","relationName":"RoleToUserRole"},{"name":"roleId","kind":"scalar","type":"Int"}],"dbName":null},"Product":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"title","kind":"scalar","type":"String"},{"name":"slug","kind":"scalar","type":"String"},{"name":"shortDescription","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"status","kind":"enum","type":"ProductStatus"},{"name":"metadata","kind":"scalar","type":"Json"},{"name":"images","kind":"object","type":"ProductImage","relationName":"ProductToProductImage"},{"name":"variants","kind":"object","type":"ProductVariant","relationName":"ProductToProductVariant"},{"name":"reviews","kind":"object","type":"Review","relationName":"ProductToReview"},{"name":"category","kind":"object","type":"Category","relationName":"CategoryToProduct"},{"name":"categoryId","kind":"scalar","type":"Int"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"OrderItem","kind":"object","type":"OrderItem","relationName":"OrderItemToProduct"},{"name":"WishlistItem","kind":"object","type":"WishlistItem","relationName":"ProductToWishlistItem"}],"dbName":null},"Category":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"name","kind":"scalar","type":"String"},{"name":"slug","kind":"scalar","type":"String"},{"name":"products","kind":"object","type":"Product","relationName":"CategoryToProduct"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"ProductImage":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"url","kind":"scalar","type":"String"},{"name":"alt","kind":"scalar","type":"String"},{"name":"isPrimary","kind":"scalar","type":"Boolean"},{"name":"product","kind":"object","type":"Product","relationName":"ProductToProductImage"},{"name":"productId","kind":"scalar","type":"Int"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"ProductVariant":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"product","kind":"object","type":"Product","relationName":"ProductToProductVariant"},{"name":"productId","kind":"scalar","type":"Int"},{"name":"name","kind":"scalar","type":"String"},{"name":"skuPrefix","kind":"scalar","type":"String"},{"name":"price","kind":"scalar","type":"Decimal"},{"name":"compareAtPrice","kind":"scalar","type":"Decimal"},{"name":"attributes","kind":"scalar","type":"Json"},{"name":"image","kind":"scalar","type":"String"},{"name":"inventory","kind":"object","type":"Inventory","relationName":"InventoryToProductVariant"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"OrderItem","kind":"object","type":"OrderItem","relationName":"OrderItemToProductVariant"}],"dbName":null},"Inventory":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"sku","kind":"scalar","type":"String"},{"name":"variant","kind":"object","type":"ProductVariant","relationName":"InventoryToProductVariant"},{"name":"variantId","kind":"scalar","type":"Int"},{"name":"quantity","kind":"scalar","type":"Int"},{"name":"reserved","kind":"scalar","type":"Int"},{"name":"location","kind":"scalar","type":"String"},{"name":"metadata","kind":"scalar","type":"Json"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"Order":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"orderNumber","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"OrderToUser"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"status","kind":"enum","type":"OrderStatus"},{"name":"subtotal","kind":"scalar","type":"Decimal"},{"name":"shipping","kind":"scalar","type":"Decimal"},{"name":"tax","kind":"scalar","type":"Decimal"},{"name":"total","kind":"scalar","type":"Decimal"},{"name":"paymentMethod","kind":"enum","type":"PaymentMethod"},{"name":"paymentMeta","kind":"object","type":"PaymentMeta","relationName":"OrderToPaymentMeta"},{"name":"items","kind":"object","type":"OrderItem","relationName":"OrderToOrderItem"},{"name":"shippingAddress","kind":"object","type":"Address","relationName":"ShippingAddress"},{"name":"shippingAddressId","kind":"scalar","type":"Int"},{"name":"billingAddress","kind":"object","type":"Address","relationName":"BillingAddress"},{"name":"billingAddressId","kind":"scalar","type":"Int"},{"name":"coupon","kind":"object","type":"Coupon","relationName":"CouponToOrder"},{"name":"couponId","kind":"scalar","type":"Int"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"ReturnRequest","kind":"object","type":"ReturnRequest","relationName":"OrderToReturnRequest"},{"name":"Refund","kind":"object","type":"Refund","relationName":"OrderToRefund"}],"dbName":null},"OrderItem":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"order","kind":"object","type":"Order","relationName":"OrderToOrderItem"},{"name":"orderId","kind":"scalar","type":"Int"},{"name":"product","kind":"object","type":"Product","relationName":"OrderItemToProduct"},{"name":"productId","kind":"scalar","type":"Int"},{"name":"variant","kind":"object","type":"ProductVariant","relationName":"OrderItemToProductVariant"},{"name":"variantId","kind":"scalar","type":"Int"},{"name":"sku","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"price","kind":"scalar","type":"Decimal"},{"name":"quantity","kind":"scalar","type":"Int"},{"name":"total","kind":"scalar","type":"Decimal"},{"name":"returned","kind":"scalar","type":"Boolean"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"ReturnRequest","kind":"object","type":"ReturnRequest","relationName":"OrderItemToReturnRequest"}],"dbName":null},"Coupon":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"code","kind":"scalar","type":"String"},{"name":"type","kind":"enum","type":"CouponType"},{"name":"amount","kind":"scalar","type":"Decimal"},{"name":"percent","kind":"scalar","type":"Int"},{"name":"description","kind":"scalar","type":"String"},{"name":"startsAt","kind":"scalar","type":"DateTime"},{"name":"expiresAt","kind":"scalar","type":"DateTime"},{"name":"usageLimit","kind":"scalar","type":"Int"},{"name":"usagePerUser","kind":"scalar","type":"Int"},{"name":"timesUsed","kind":"scalar","type":"Int"},{"name":"active","kind":"scalar","type":"Boolean"},{"name":"metadata","kind":"scalar","type":"Json"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"Order","kind":"object","type":"Order","relationName":"CouponToOrder"}],"dbName":null},"Review":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"user","kind":"object","type":"User","relationName":"ReviewToUser"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"product","kind":"object","type":"Product","relationName":"ProductToReview"},{"name":"productId","kind":"scalar","type":"Int"},{"name":"rating","kind":"scalar","type":"Int"},{"name":"title","kind":"scalar","type":"String"},{"name":"body","kind":"scalar","type":"String"},{"name":"approved","kind":"scalar","type":"Boolean"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"Wishlist":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"user","kind":"object","type":"User","relationName":"UserToWishlist"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"items","kind":"object","type":"WishlistItem","relationName":"WishlistToWishlistItem"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"WishlistItem":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"wishlist","kind":"object","type":"Wishlist","relationName":"WishlistToWishlistItem"},{"name":"wishlistId","kind":"scalar","type":"Int"},{"name":"product","kind":"object","type":"Product","relationName":"ProductToWishlistItem"},{"name":"productId","kind":"scalar","type":"Int"},{"name":"variantId","kind":"scalar","type":"Int"},{"name":"createdAt","kind":"scalar","type":"DateTime"}],"dbName":null},"Address":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"user","kind":"object","type":"User","relationName":"AddressToUser"},{"name":"userId","kind":"scalar","type":"Int"},{"name":"fullName","kind":"scalar","type":"String"},{"name":"line1","kind":"scalar","type":"String"},{"name":"line2","kind":"scalar","type":"String"},{"name":"city","kind":"scalar","type":"String"},{"name":"province","kind":"scalar","type":"String"},{"name":"postalCode","kind":"scalar","type":"String"},{"name":"country","kind":"scalar","type":"String"},{"name":"phone","kind":"scalar","type":"String"},{"name":"metadata","kind":"scalar","type":"Json"},{"name":"isDefaultShipping","kind":"scalar","type":"Boolean"},{"name":"isDefaultBilling","kind":"scalar","type":"Boolean"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"ordersShipping","kind":"object","type":"Order","relationName":"ShippingAddress"},{"name":"ordersBilling","kind":"object","type":"Order","relationName":"BillingAddress"}],"dbName":null},"AuditLog":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"actor","kind":"object","type":"User","relationName":"AuditLogToUser"},{"name":"actorId","kind":"scalar","type":"Int"},{"name":"action","kind":"scalar","type":"String"},{"name":"entity","kind":"scalar","type":"String"},{"name":"entityId","kind":"scalar","type":"String"},{"name":"changes","kind":"scalar","type":"Json"},{"name":"ip","kind":"scalar","type":"String"},{"name":"userAgent","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"}],"dbName":null},"ReturnRequest":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"order","kind":"object","type":"Order","relationName":"OrderToReturnRequest"},{"name":"orderId","kind":"scalar","type":"Int"},{"name":"orderItem","kind":"object","type":"OrderItem","relationName":"OrderItemToReturnRequest"},{"name":"orderItemId","kind":"scalar","type":"Int"},{"name":"reason","kind":"scalar","type":"String"},{"name":"status","kind":"enum","type":"ReturnStatus"},{"name":"evidence","kind":"scalar","type":"Json"},{"name":"requestedAt","kind":"scalar","type":"DateTime"},{"name":"processedAt","kind":"scalar","type":"DateTime"},{"name":"refund","kind":"object","type":"Refund","relationName":"RefundToReturnRequest"},{"name":"metadata","kind":"scalar","type":"Json"}],"dbName":null},"Refund":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"order","kind":"object","type":"Order","relationName":"OrderToRefund"},{"name":"orderId","kind":"scalar","type":"Int"},{"name":"returnRequest","kind":"object","type":"ReturnRequest","relationName":"RefundToReturnRequest"},{"name":"returnRequestId","kind":"scalar","type":"Int"},{"name":"amount","kind":"scalar","type":"Decimal"},{"name":"method","kind":"scalar","type":"String"},{"name":"status","kind":"enum","type":"RefundStatus"},{"name":"providerRef","kind":"scalar","type":"String"},{"name":"metadata","kind":"scalar","type":"Json"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"processedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"PaymentMeta":{"fields":[{"name":"id","kind":"scalar","type":"Int"},{"name":"order","kind":"object","type":"Order","relationName":"OrderToPaymentMeta"},{"name":"orderId","kind":"scalar","type":"Int"},{"name":"provider","kind":"scalar","type":"String"},{"name":"transactionId","kind":"scalar","type":"String"},{"name":"status","kind":"scalar","type":"String"},{"name":"amount","kind":"scalar","type":"Decimal"},{"name":"raw","kind":"scalar","type":"Json"},{"name":"capturedAt","kind":"scalar","type":"DateTime"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null}},"enums":{},"types":{}}'
);
defineDmmfProperty(exports.Prisma, config.runtimeDataModel);
config.engineWasm = {
  getRuntime: async () => require("./query_engine_bg.js"),
  getQueryEngineWasmModule: async () => {
    const loader = (await import("#wasm-engine-loader")).default;
    const engine = (await loader).default;
    return engine;
  },
};
config.compilerWasm = undefined;

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL:
      (typeof globalThis !== "undefined" && globalThis["DATABASE_URL"]) ||
      (typeof process !== "undefined" && process.env && process.env.DATABASE_URL) ||
      undefined,
  },
});

if (
  (typeof globalThis !== "undefined" && globalThis["DEBUG"]) ||
  (typeof process !== "undefined" && process.env && process.env.DEBUG) ||
  undefined
) {
  Debug.enable(
    (typeof globalThis !== "undefined" && globalThis["DEBUG"]) ||
      (typeof process !== "undefined" && process.env && process.env.DEBUG) ||
      undefined
  );
}

const PrismaClient = getPrismaClient(config);
exports.PrismaClient = PrismaClient;
Object.assign(exports, Prisma);
